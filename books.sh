#!/bin/bash

# Global preferences
# ------------------
CHECK_RUN=false          # You would want to have this set to 'true' at first and make a test run before changing production data 
IFS=';'                 # Delimiter in the CSV file
DIVIDER='-'             # Change whitespace in to this divider

# Enable checking window size for drawing lines
# ---------------------------------------------
shopt -s checkwinsize

if [ -z "$1" ]; then
    echo "No input file"
    exit 1
fi

function draw_line() {
    if [[ -z $1 ]]; then
	cols="$COLUMNS"
    else
    	cols="$1"
    fi
    while ((cols-- > 0)); do
	printf '\u2500'
    done
    printf '\n'
}

while IFS=$IFS read -u 10 -ra tuple; do

    draw_line
    omit=false
    old_fn=${tuple[0]}
    if [ ! -f "$old_fn" ]; then
	echo "$old_fn does not exist."
	omit=true
    fi
    
    if $omit; then
    	continue
    fi

    printf '\n'
    printf "File name:       ${old_fn}\n"
    select yn in "Proceed" "Omit"; do
    	case $yn in
	    Proceed) break;;
	    Omit) 
	    	omit=true
	    	break;;
	esac
    done

    old_title=$(exiftool -s3 -Title "${old_fn}")
    old_auth=$(exiftool -s3 -Author "${old_fn}")

    # If there is no new title, get the old one, if there is any.
    # If there is no new, nor old title, omit the file
    # If there are both old and new titles defined, prompt the user to choose which one
    # he wants to go with.
    # ---------------------------------------------------------------------------------

    new_title=${tuple[1]}
    if [[ -z $new_title ]]; then
    	if [[ -n $old_title ]]; then
    	    echo "The original title is: $old_title"
	fi
	echo "There is no new title defined in CSV file. Do you want to define your own?"
	select yn in "Yes" "No"; do
	    case $yn in 
		Yes) 
		    printf "Please type the new title: "
		    read new_title
		    break;;
		No) 
		    break;;
	    esac
	done
    fi

    change_title=true

    if [[ -z "${new_title}" ]] && [[ -n "${old_title}" ]]; then
    	new_title=$old_title
    elif [[ -n "${new_title}" ]] && [[ -n "${old_title}" ]]; then
	if [ ${old_title} != ${new_title} ]; then
	    printf "\nBoth new nad old titles are defined and are different. Which title you want to go with?\n"
	    select yn in "${old_title} (from metadata)" ${new_title}; do
		case $yn in 
		    "${old_title} (from metadata)") 
			new_title=${old_title}
			break;;
		    ${new_title}) break;;
		esac
	    done
	else
	    change_title=flase
	fi
    fi

    # If there is no new author, get the old one, if there is any.
    # If there is no new, nor old author, omit the file
    # If there are both old and new authors defined, prompt the user to choose which one
    # he wants to go with.
    # ---------------------------------------------------------------------------------- 
    new_auth=${tuple[2]}
    if [[ -z $new_auth ]]; then
    	if [[ -n $old_auth ]]; then
    	    echo "The original author is: $old_auth"
	fi
	echo "There is no new author defined in CSV file. Do you want to define your own?"
	select yn in "Yes" "No"; do
	    case $yn in 
		Yes) 
		    printf "Please type in the new author: "
		    read new_auth
		    break;;
		No) 
		    break;;
	    esac
	done
    fi

    change_auth=true

    if [[ -z "${new_auth}" ]] && [[ -n "${old_auth}" ]]; then
    	new_auth=$old_auth
    elif [[ -n "${new_auth}" ]] && [[ -n "${old_auth}" ]]; then
	if [ "${old_auth}" != "${new_auth}" ]; then
	    printf "\nBoth new and original authors are defined and are different. Which one you want to go with?\n"
	    select yn in "${old_auth} (from metadata)" ${new_auth}; do
		case $yn in 
		    "${old_auth} (from metadata)") 
			new_auth=${old_auth}
			break;;
		    ${new_auth}) break;;
		esac
	    done
	else
	    change_auth=false
	fi
    fi

    # Generate a new filename.
    #
    # The new filename will be generated by removing all the 
    # non-ASCII characters from the previously generated title.
    # Then, all the remaining whitespace chars that are still in 
    # the title are changed to anything that is defined by the $DIVIDER
    # -----------------------------------------------------------------
    new_fn=$(echo "$new_title" |\
    	iconv -f utf8 -t ascii//TRANSLIT} |\
    	tr -dc '[:alnum:][:space:]\n\r' |\
    	tr -s ' ' |\
    	tr ' ' $DIVIDER |\
    	tr '[:upper:]' '[:lower:]')
    new_fn=${new_fn}.pdf

    printf "\nSummary of changes:\n"
    draw_line 20
    printf "Original title:  ${old_title}\n"
    printf "Original author: ${old_auth}\n"
    printf "New file name:   ${new_fn}\n"
    printf "New title:       ${new_title}\n"
    printf "New author:      ${new_auth}\n\n"

    select yn in "Proceed" "Omit"; do
    	case $yn in
	    Proceed) break;;
	    Omit) 
	    	omit=true
	    	break;;
	esac
    done

    if $omit; then
	echo "Omitting file..."
    	continue
    fi

    # Rename the file to the newly generated file name
    # ------------------------------------------------
    echo "Renaming file to '${new_fn}'..."
    if [ "$CHECK_RUN" = false ]; then
	mv "${old_fn}" "${new_fn}" &> /dev/null
	retval=$?
	if [ $retval -ne 0 ]; then
	    echo "Renaming file failed... The return code was: $retval"
	fi
    fi
    echo "File renamed."

    # Remove all the metadata of the processed file
    # ---------------------------------------------
    echo "Removing all metadata..."
    if [ "$CHECK_RUN" = false ]; then
	exiftool -all= "${new_fn}" &> /dev/null
	retval=$?
	if [ $retval -ne 0 ]; then
	    echo "Removing metadata failed... The return code was: $retval"
	fi
    fi
    echo "Metadata removed."
    
    # If there is a need for changing the title in metadata
    # use exiftool and check the return value of the exiftool
    # command. If not, just tell the user about preservation of the 
    # original title in metadata
    # -------------------------------------------------------------
    if [ $change_title ]; then
	echo "Setting new title to '${new_title}'..."
	if [ "$CHECK_RUN" = false ]; then
	    exiftool -Title="${new_title}" "${new_fn}" &> /dev/null
	    retval=$?
	    if [ $retval -ne 0 ]; then
		echo "Setting new title failed... The return code was: $retval"
	    fi
	fi
    else
    	echo "Preserving original title: '${new_title}'"
    fi

    # If there is a need for changing the author name in metadata
    # use exiftool and check the return value of the exiftool
    # command. If not, just tell the user about preservation of the 
    # original author name in metadata
    # -------------------------------------------------------------
    if [ $change_auth ]; then
	echo "Setting new author to '${new_auth}'..."
	if [ "$CHECK_RUN" = false ]; then
	    exiftool -Author="${new_auth}" "${new_fn}" &> /dev/null
	    retval=$?
	    if [ $retval -ne 0 ]; then
		echo "Setting new author failed... The return code was: $retval"
	    fi
	fi
    else
    	echo "Preserving original author: '${new_auth}'"
    fi

    echo "All done."

done 10<$1 
